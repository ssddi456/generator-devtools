#!/usr/bin/env node

/**
 * Module dependencies.
 */

process.env.DEBUG = '*';

var app = require('../app');
var debug = require('debug')('templates:server');
var http = require('http');
var path = require('path');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3005');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

var liveServer = require('live-server');
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);

  try{
    liveServer.start({
      port: 35729, // Set the server port. Defaults to 8080.
      host: "localhost", // Set the address to bind to. Defaults to 0.0.0.0 or process.env.IP.
      root: path.join(__dirname, '../'), // Set root directory that's being server. Defaults to cwd.
      open: false, // When false, it won't load your browser by default.
      ignore: 'bin,app.js,package.json,routes', // comma-separated string for paths to ignore
      wait: 300, // Waits for all changes, before reloading. Defaults to 0 sec.
      // mount: [['/components', ]], // Mount a directory to a route.
      logLevel: 2 // 0 = errors only, 1 = some, 2 = lots
    });
  } catch(e){
    debug(e);
  }
}
